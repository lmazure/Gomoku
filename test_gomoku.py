from typing import Optional
from gomoku import Gomoku

def convert_go_ban(board: str) -> list[list[int]]:
    # convert the go ban to a 2D array
    # '.' -> 0
    # '⬤' -> 1
    # '○' -> -1
    tempo = [[int(cell == '⬤') - int(cell == '○') for cell in line] for line in board.splitlines()]
    return [list(i) for i in zip(*tempo)]


def assert_code_and_message(board: str, x: int, y: int, generation: int, expected_code: int, expected_message: Optional[str]):
    gomoku = Gomoku(15)
    gomoku.set(convert_go_ban(board), generation)
    assert gomoku.manage_move(x, y) == (expected_code, expected_message)

def test_legal_first_move():
    str = """\
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
"""
    assert_code_and_message(str, 7, 7, 0, Gomoku.VALID_MOVE, None)


def test_illegal_first_move():
    str = """\
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
"""
    assert_code_and_message(str, 0, 0, 0, Gomoku.INVALID_MOVE, "First move must be in the center")

def test_moveout_of_go_ban():
    str = """\
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
"""
    assert_code_and_message(str, 16, 0, 0, Gomoku.INVALID_MOVE, "Move out of the go ban")

def test_move_on_occupied_cell():
    str = """\
..............○
...⬤..........○
...............
...............
...............
...............
...............
...............
...⬤...........
...............
...............
...............
...............
...............
...............
"""
    assert_code_and_message(str, 3, 1, 4, Gomoku.INVALID_MOVE, "Move on an already played cell")

def test_detect_horizontal_win_top_right_corner():
    str = """\
⬤.⬤⬤⬤..........
○..............
○..............
○..............
○..............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
"""
    assert_code_and_message(str, 1, 0, 8, Gomoku.WIN, "Player 1 wins (horizontal alignment)")

def test_detect_vertical_win_bottom_right_corner():
    str = """\
○○○○...........
...............
...............
...............
...............
...............
...............
...............
...............
...............
.⬤.............
.⬤.............
...............
.⬤.............
.⬤.............
"""
    assert_code_and_message(str, 1, 12, 8, Gomoku.WIN, "Player 1 wins (vertical alignment)")

def test_detect_diagonal_win_bottom_left_corner():
    str = """\
○○○○...........
...............
...............
...............
...............
...............
...............
...............
...............
...............
.........⬤.....
..........⬤....
...........⬤...
............⬤..
...............
"""
    assert_code_and_message(str, 13, 14, 8, Gomoku.WIN, "Player 1 wins (diagonal alignment)")

def test_detect_anti_diagonal_win_bottom_left_corner():
    str = """\
○○○○...........
...............
...............
...............
...............
...............
...............
...............
...............
...............
..............⬤
...............
............⬤..
...........⬤...
..........⬤....
"""
    assert_code_and_message(str, 13, 11, 8, Gomoku.WIN, "Player 1 wins (anti-diagonal alignment)")